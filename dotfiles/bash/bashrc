#!/bin/bash
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

if [[ ${__bashrc_bench:-0} -eq 1 ]]; then
	PS4='+ $EPOCHREALTIME\011 '
	exec 5> /tmp/command.txt
	BASH_XTRACEFD="5"
	echo "See /tmp/command.txt" >&2
	set -x
fi

if ! command -V gojq >/dev/null 2>/dev/null; then
	if [[ -x "$HOME/bin/gojq" ]]; then
		export "PATH=$HOME/bin:$PATH"
	else
		go install github.com/itchyny/gojq/cmd/gojq@latest
	fi
fi

if [[ $(hostname) != tequila ]]; then
get_output () {
	if [[ -z "$SWAYSOCK" || ! -e "$SWAYSOCK" ]]; then
		SWAYSOCK="$(find "/run/user/$(id -u)/" -type s -name "sway-ipc.$(id -u).*.sock" -printf "%T@ %p\n" 2>/dev/null | sort -nr | head -n1 | cut '-d ' -f2)"
		export SWAYSOCK
	fi
	{ swaymsg -t get_outputs -r 2>/dev/null || echo '[]'; } | gojq '.[] | select(.focused) | .current_mode' 
}
get_output_width () {
	get_output | gojq -r '.width'
}
get_output_height () {
	get_output | gojq -r '.height'
}
get_output_size () {
    get_output | gojq -r '(.width | tostring) + " " + (.height | tostring)'
}
get_output_physical_size () {
    command -V wayland-info >/dev/null || sudo apt install wayland-utils >&2
    wayland-info | sed -ne "/^interface: 'wl_output',/,$ { /physical_/ { s/^[^:]*: //; s/ mm,[^:]*: / /; s/mm,.*$//; p; }; }" | head -n1
}
get_output_dpi () {
    get_output_size | while read -r lw lh; do
        #echo "lw=$lw lh=$lh" >&2
        get_output_physical_size | while read -r pw ph; do
            #echo "pw=$pw ph=$ph" >&2
            echo "($lw + $lh) / (($pw + $ph) / 25.4)" | bc -l | cut -d. -f1
        done
    done
}
output_is_hidpi () {
    dpi=$(get_output_dpi)
    if [[ -n $dpi ]]; then
        test "$dpi" -gt 143
    else
        height="$(get_output_height)"
        test "${height:-0}" -gt 1080
    fi
}

get_workspace_rect () {
	swaymsg -r -t get_workspaces | gojq '.[] | select(.focused) | .rect'
}
get_workspace_size () {
	get_workspace_rect | gojq -r '(.width | tostring) + "x" + (.height | tostring)'
}

trunc () {
	sed -e 's/\.[0-9]*$//'
}

rdp_opts () {
	smart_size="$(get_workspace_size)"
	size_w=1920
	if output_is_hidpi; then
		scale="$(swaymsg -r -t get_outputs | gojq '.[] | select(.active) | .scale')"
		if [ "$(echo "$scale * 10" | bc -l | trunc)" -gt 10 ]; then
			size_w="$(echo "$scale * $size_w" | bc -l | trunc)"
		fi
	fi
	size_h=$(echo "${smart_size#*x} / ( $(get_workspace_rect | gojq -r '.width') / ${size_w})" | bc -l | trunc)
	size="${size_w}x${size_h}"
	# echo "# size=$size" >&2
	# https://github.com/FreeRDP/FreeRDP/discussions/8562
	RDP_OPTIONS=(
		-grab-keyboard /kbd:0x409 /cert:ignore 
		+auto-reconnect /auto-reconnect-max-retries:10
		+bitmap-cache /codec-cache:nsc
		/bpp:8
		#/compression-level:2 
		/clipboard
		-decorations /disp 
		#/dynamic-resolution 
		#/floatbar:show:always
		+fonts 
		#/geometry
		/gfx:AVC444 +gfx-progressive +gfx-small-cache +glyph-cache 
		#+home-drive
		#/jpeg /jpeg-quality:75
		-menu-anims
		/microphone:format:1 /sound 
		+multitouch +multitransport
		"/network:$(if nmcli c show --active 'GT-mi9se Network' | grep -q 'GENERAL.STATE:\s*activated'; then echo modem; else echo auto; fi)"
		#/nsc
		+offscreen-cache 
		"/size:${size}"
		#/smart-sizing
		-themes
		/timeout:30000
		+toggle-fullscreen
		-wallpaper
	)
	if false; then
		psize="$(get_output_physical_size | head -n1)"
		if [[ -n "$psize" ]]; then
			RDP_OPTIONS+=(
				"/pheight:$(echo "$psize" | cut '-d ' -f2)"
				"/pwidth:$(echo "$psize" | cut '-d ' -f1)"
			)
		fi
	fi
	if false && output_is_hidpi; then
		#RDP_OPTIONS+=(/scale:140)
		RDP_OPTIONS+=("/smart-sizing:${smart_size}")
	fi
	if [ -t 1 ]; then
		OPTS+=(/log-level:INFO)
	else
		OPTS+=(/log-level:WARN)
	fi

	export RDP_OPTIONS
}
export NO_AT_BRIDGE=1
export MOZ_ENABLE_WAYLAND=1
export MOZ_DBUS_REMOTE=1
export QT_WAYLAND_DISABLE_WINDOWDECORATION=1
export QT_QPA_PLATFORM=wayland
export QT_QPA_PLATFORMTHEME=qt5ct
export QT_AUTO_SCREEN_SCALE_FACTOR=1
if output_is_hidpi; then
    export QT_SCREEN_SCALE_FACTOR=2
else
    unset QT_SCREEN_SCALE_FACTOR
fi
export XDG_SESSION_TYPE=wayland
export _JAVA_AWT_WM_NONREPARENTING=1
export SDL_VIDEODRIVER=wayland
export GDK_BACKEND=wayland
export CLUTTER_BACKEND=wayland
if [[ -z "${WAYLAND_DISPLAY:-}" ]]; then
		# shellcheck disable=SC2012
    wd="$(ls -t "/run/user/$(id -u)/"wayland-? 2>/dev/null | head)"
    if [[ -n "$wd" ]]; then
        export WAYLAND_DISPLAY="$wd"
    fi
fi

fi

# set PATH so it includes user's private bin if it exists
export LANGUAGE="hu_HU:en_US:en"
if [[ $(hostname) = tequila ]]; then
	export LANG=en_US.UTF-8
else
	export LANG=hu_HU.UTF-8
fi
export LC_ALL=
#export ENV=$HOME/.profile

export TNS_ADMIN=$HOME/.config/oracle
export TMPDIR=${TMPDIR:-/tmp}
EDITOR='hx'
export EDITOR
export VISUAL=$EDITOR
export PAGER='less'
export CCACHE_COMPRESS=1

if [[ "$(hostname)" = tgulacsi-dell-5570 ]]; then
	export OPENAI_API_KEY="$(gopass show I/openai.com/tamas+openai@gulacsi.eu | sed -ne '/API/ { s/^.*: *//; p; }')"
fi

export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'
if [[ -e "$HOME/android-sdk" ]]; then
	export PATH=$HOME/android-sdk/tools/bin:$PATH
fi

if [[ -z "$SUDO_ASKPASS" ]]; then
	export SUDO_ASKPASS=/usr/bin/ssh-askpass
fi

if [[ -d /usr/local/plan9 ]]; then
	export PLAN9=/usr/local/plan9
	PATH=$PATH:$PLAN9/bin
fi

export GO111MODULE=on
unset GOPATH
export GOBIN=~/bin
if [[ -x "/usr/local/go/bin/go" ]] && ! echo "$PATH" | grep -q /usr/local/go/bin; then
	export PATH=/usr/local/go/bin:$PATH
	if [[ -z "$GOROOT_BOOTSTRAP" ]] && [[ -e /usr/local/go1.4.2/bin/go ]]; then
		export GOROOT_BOOTSTRAP=/usr/local/go1.4.2
	fi
	export GOPRIVATE=unosoft.hu,git.sr.ht
	export GOPROXY=http://proxy.golang.org,direct
	export MAGEFILE_HASHFAST=1
fi
if [[ -z "${_OHOME_HAS_BEEN_SET:-}" ]]; then
	export TNS_ADMIN=$HOME
	#echo OH=$ORACLE_HOME
	if [[ -z "$ORACLE_HOME" ]]; then
		for bdn in /u01/app/oracle/product /usr/lib/oracle; do
			#echo "bdn=$bdn"
			if [[ ! -d $bdn ]]; then
				continue
			fi
			dn="$(find "$bdn" -maxdepth 2 -type d \( -name xe -o -name client64 \) \
                2>/dev/null | head -n1)"
            #echo "#dn=$dn"
            export ORACLE_BASE=$bdn
            export ORACLE_HOME=$dn
            #export ORACLE_SID=XE
            export PATH=$ORACLE_HOME/bin:$PATH
            #echo "H=$ORACLE_HOME"
			break
		done
	fi
	#echo OH=$ORACLE_HOME
	_OHOME_HAS_BEEN_SET=1
fi

if [[ -z "${_PATH_HAS_BEEN_SET:-}" ]]; then
	if [[ -d "$HOME/bin" ]] && echo "$PATH" | grep -vq "$HOME/bin"; then
		PATH="$HOME/bin:$PATH"
	fi
	if [[ -s "$HOME/.cargo/env" ]]; then
		# shellcheck source=/dev/null
		. "$HOME/.cargo/env"
	fi
	export PATH
	_PATH_HAS_BEEN_SET=1
fi

if [[ -f ~/.fzf.bash ]]; then
		# shellcheck disable=SC1091
    # shellcheck source=$HOME/.fzf.bash
    source "$HOME/.fzf.bash"
fi
